{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAGC,GACxB,IAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEN,IAAGC,iBAEbM,EAAO,CAAEP,IAAGC,gB,GAEbA,E,IAKP,IAAMQ,EAAO,CACXC,MAAOC,SAASC,cAAc,UAC9BC,gBAAiBF,SAASC,cAAc,kBACxCE,eAAgBH,SAASC,cAAc,iBACvCG,YAAaJ,SAASC,cAAc,oBAGtCH,EAAKC,MAAMM,iBAAiB,SAE5B,SAAuBC,GACrBA,EAAEC,iBACF,IAAIC,EAAeV,EAAKI,gBAAgBO,cAClCC,EAAQZ,EAAKK,eAAeM,cAC5BE,EAAIb,EAAKM,YAAYK,cAErBG,EAAU,CAAC,mBAAmB,kBAAkB,eACnB,KAA/Bd,EAAKI,gBAAgBW,OAAcC,EAAA5B,GAAS6B,OAAOC,KAAK,GAAcC,OAAXL,EAAQ,KACrC,KAA9Bd,EAAKK,eAAeU,OAAcC,EAAA5B,GAAS6B,OAAOC,KAAK,GAAcC,OAAXL,EAAQ,KACvC,KAA3Bd,EAAKM,YAAYS,OAAcC,EAAA5B,GAAS6B,OAAOC,KAAK,GAAcC,OAAXL,EAAQ,KAEnE,IAAK,IAAIM,EAAI,EAAGA,GAAKP,EAAGO,IACtB9B,EAAc8B,EAAGV,GACdW,MAAK,SAAAC,G,IAAG/B,EAAC+B,EAAD/B,EAAGC,EAAY8B,EAAZ9B,aACV+B,QAAQC,IAAI,uBAAiCL,OAAR5B,EAAE,QAAmB4B,OAAb3B,EAAa,OAC1DwB,EAAA5B,GAAS6B,OAAOQ,QACd,uBAAiCN,OAAR5B,EAAE,QAAmB4B,OAAb3B,EAAa,M,IAGjDkC,OAAM,SAAAJ,G,IAAG/B,EAAC+B,EAAD/B,EAAGC,EAAY8B,EAAZ9B,aACX+B,QAAQC,IAAI,sBAAgCL,OAAR5B,EAAE,QAAmB4B,OAAb3B,EAAa,OACzDwB,EAAA5B,GAAS6B,OAAOU,QACd,sBAA8BR,OAAR5B,EAAE,QAAmB4B,OAAb3B,EAAa,M,IAGjDkB,GAAgBE,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(i, promiseDelay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ i, promiseDelay });\n      } else {\n        reject({ i, promiseDelay });\n      }\n    }, promiseDelay);\n  });\n  return promise;\n}\n\nconst refs = {\n  buttn: document.querySelector('button'),\n  inputFirstDelay: document.querySelector('[name=\"delay\"]'),\n  inputDelayStep: document.querySelector('[name=\"step\"]'),\n  inputAmount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.buttn.addEventListener('click', onButtonClick);\n\nfunction onButtonClick(e) {\n  e.preventDefault();\n  let promiseDelay = refs.inputFirstDelay.valueAsNumber;\n  const delay = refs.inputDelayStep.valueAsNumber;\n  const a = refs.inputAmount.valueAsNumber;\n\n  const massage = ['Type First delay','Type Delay step','Type Amount']\n  if (refs.inputFirstDelay.value === '') Notiflix.Notify.info(`${massage[0]}`);\n  if (refs.inputDelayStep.value === '') Notiflix.Notify.info(`${massage[1]}`);\n  if (refs.inputAmount.value === '') Notiflix.Notify.info(`${massage[2]}`);\n\n  for (let i = 1; i <= a; i++) {\n    createPromise(i, promiseDelay)\n      .then(({ i, promiseDelay }) => {\n        console.log(`✅ Fulfilled promise ${i} in ${promiseDelay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${i} in ${promiseDelay}ms`\n        );\n      })\n      .catch(({ i, promiseDelay }) => {\n        console.log(`❌ Rejected promise ${i} in ${promiseDelay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${i} in ${promiseDelay}ms`\n        );\n      });\n    promiseDelay += delay;\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","i","promiseDelay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$refs","buttn","document","querySelector","inputFirstDelay","inputDelayStep","inputAmount","addEventListener","e","preventDefault","promiseDelay1","valueAsNumber","delay","a","massage","value","$parcel$interopDefault","Notify","info","concat","i1","then","param","console","log","success","catch","failure"],"version":3,"file":"03-promises.2d7c0fc0.js.map"}